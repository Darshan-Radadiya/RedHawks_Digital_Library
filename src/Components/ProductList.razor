@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
<!--Displays search function-->
<div>
    <div class="container">
        <div class="row justify-content-end">
            <div class="col-4">
                <input type="text" placeholder="Search" aria-label="Search" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
                <button @onclick="(e => EnableFilterData())" class="search-btn my-2 my-sm-0">Search</button>
                <button @onclick="(e => ClearFilterData())" class="search-btn my-2 my-sm-0">Clear</button>
            </div>
        </div>
    </div>
</div>

<!--Displays quote-->
<div class="container">
    <div class="row">
        <div class="col">
            <div class="monika" align="center" style="font-size:180%"><em>"Simplicity is prerequisite for reliability."</em></div>
            <div class="monika" align="center" style="font-size:140%"<em>-Edsger Dijkstra</em></div>
        </div>
    </div>
</div>

<div class="card-columns">
    @{
        var productList = ProductService.GetAllData();

        // If filter is enabled, reduce the data set to the filter string
        if (FilterData)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
            productList = productList.Where(m => m.Author.Contains(FilterDataString));
        }

        foreach (var product in productList)
        {
            <div class="card">
                <!--Display product image-->
                <div class="card-img" style="background-image: url('@product.Image');"></div>

                <!--Displays product title on card-->
                <div class="card-body">
                    <h5 class="card-title">@product.Title</h5>
                    <h8 class="card-title">@product.Author</h8>
                </div>
                <div class="card-footer">

                    <!--More Info button-->
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">More Info</button>
                    </small>
                </div>
            </div>
        }
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <!--Display product title-->
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <!--Display product artist-->
                    <h5 class="modal-title" id="productAuthor">: @selectedProduct.Author</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');"></div>
                        <!--Display product image-->
                        <div class="card-body">
                            <!--Display product description-->
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>

                <!--Shows vote count-->
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;

    // <summary>
    /// Retrieves specific product information
    /// </summary>  
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    /// <summary>
    /// Retrieves current ratings   
    /// </summary>
    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    /// <summary>
    /// Function to submit ratings
    /// </summary>
    /// <param name="rating"></param>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
    string FilterDataString = "";
    bool FilterData = false;

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
    }
}